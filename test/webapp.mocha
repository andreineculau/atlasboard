var assert = require ('assert');
var web_logic = require ('../lib/webapp/logic.js');
var path = require ('path');

describe ('web_server', function(){

  var packagesLocalFolder = path.join(process.cwd(), "/test/packages");
  var packagesAtlasboardFolder = path.join(process.cwd(), "/packages");
  var packagesWithInvalidDashboardFile = path.join(process.cwd(), "/packages_invalid_format");

  describe ('dashboards', function(){

    it('get all', function(done){
      var res = {
        render: function (template, data){
          assert.equal(5, data.dashboards.length);
          done();
        }
      };

      web_logic.list_all_dashboards([packagesLocalFolder, packagesAtlasboardFolder], {}, res);
    });


    it('render one', function(done){
      var res = {
        render: function (template, data){
          assert.ok(data.dashboard_name);
          assert.ok(data.dashboardConfig);
          done();
        },

        send: function (data){
          done("Not expected");
        }
      };

      web_logic.render_dashboard([packagesLocalFolder, packagesAtlasboardFolder], "test_dashboard1", {}, res);
    });


    it('returns error if there is a dahsboard with an invalid format', function(done){
      var res = {
        render: function (template, data){
          done("Not expected");
        },

        send: function (status, data){
          assert.equal(status, 400);
          done();
        }
      };

      web_logic.render_dashboard([packagesLocalFolder, packagesAtlasboardFolder, packagesWithInvalidDashboardFile], "invalid_json_file", {}, res);
    });


    it('render one - ignore path prefix - prevent path traversal issues', function(done){
      var res = {
        render: function (template, data){
          assert.ok(data.dashboard_name);
          assert.ok(data.dashboardConfig);
          done();
        },

        send: function (data){
          done("Not expected");
        }
      };

      web_logic.render_dashboard([packagesLocalFolder, packagesAtlasboardFolder], "../test_dashboard1", {}, res);
    });


    it('return 404 if dashboard is not found  if invalid input data', function(done){
      var res = {
        render: function (template, data){
          done("Invalid dashboard");
        },

        send: function (status, data){
          assert.equal(400, status);
          done();
        }
      };

      web_logic.render_dashboard("../../packagesLocalFolder", "tttest_dashboard1", {}, res);
    });


    it('return 404 if dashboard not found', function(done){
      var res = {
        render: function (template, data){
          done("Invalid dashboard");
        },

        send: function (status, data){
          assert.equal(404, status);
          done();
        }
      };

      web_logic.render_dashboard([packagesLocalFolder, packagesAtlasboardFolder], "tttest_dashboard1", {}, res);
    });

  });


  describe ('javascript assets', function(){

    it('return general javascript assets', function(done){
      var res = {
        type: function (data){
          assert.equal("application/javascript", data);
        },

        sendfile: function (file){
          done("not expected");
        },

        write: function (data){

        },

        end: function (data){
          done();
        }
      };

      var atlasboard_assets_folder = path.join(__dirname, "../assets");
      var wallboard_assets_folder = path.join(process.cwd(), "samples/project/assets");

      web_logic.render_script_assets(atlasboard_assets_folder, wallboard_assets_folder, {}, res);
    });

    it('return javascript assets for a certain widget', function(done){
      var res = {
        type: function (data){
          assert.equal("application/javascript", data);
        },

        sendfile: function (file){
          assert.ok(file.indexOf("widgets/blockers/blockers.js")>-1);
          done();
        },

        write: function (data){
          done("not expected");
        },

        end: function (data){
          done("not expected");
        }
      };

      web_logic.js_widget([packagesLocalFolder, packagesAtlasboardFolder], "blockers", {}, res);
    });


    it('ignore path prefix - prevent path traversal issues', function(done){
      var res = {
        type: function (data){
          assert.equal("application/javascript", data);
        },

        sendfile: function (file){
          assert.ok(file.indexOf("widgets/blockers/blockers.js")>-1);
          done();
        },

        write: function (data){
          done("not expected");
        },

        end: function (data){
          done("not expected");
        }
      };

      web_logic.js_widget([packagesLocalFolder, packagesAtlasboardFolder], "../../blockers", {}, res);
    });
  });


  describe ('css assets', function(){

    it('return css general assets', function(done){
      var bundle_file = "";
      var res = {
        type: function (data){
          assert.equal("text/css", data);
        },

        write: function (data){
          bundle_file+=data;
        },

        end: function (data){
          assert.ok(!data);
          assert.ok(bundle_file.indexOf("body") > -1);
          assert.ok(bundle_file.indexOf("#main-container #widgets-container li") > -1);
          done();
        }
      };

      var atlasboard_assets_folder = path.join(process.cwd(), "/assets");
      web_logic.render_css_general_assets(atlasboard_assets_folder, {}, res);
    });

  });


  describe ('widget', function(){

    //todo: improve this tests
    it('return html and css', function(done){
      var bundle_file = "";
      var res = {
        type: function (data){

        },

        write: function (data){
          bundle_file+=data;
        },

        sendfile: function (data){
          done("Error");
        },

        end: function (data){
          assert.ok(!data);
          assert.ok(bundle_file.indexOf("body") > -1);
          assert.ok(bundle_file.indexOf("<style>") > -1);
          done();
        }
      };

      web_logic.render_html_widget([packagesLocalFolder, packagesAtlasboardFolder], "blockers", {}, res);
    });

    it('ignore path prefix - prevent path traversal issues', function(done){
      var bundle_file = "";
      var res = {
        type: function (data){

        },

        write: function (data){
          bundle_file+=data;
        },

        sendfile: function (data){
          done("Error");
        },

        end: function (data){
          assert.ok(!data);
          assert.ok(bundle_file.indexOf("body") > -1);
          assert.ok(bundle_file.indexOf("<style>") > -1);
          done();
        }
      };

      web_logic.render_html_widget([packagesLocalFolder, packagesAtlasboardFolder], "../../blockers", {}, res);
    });


    it('return error 404 if widget not found', function(done){
      var res = {
        type: function (data){

        },

        sendfile: function (data){
          done("Error. Not expected");
        },

        send: function (status, data){
          assert.equal(404, status);
          done();
        }
      };

      web_logic.render_html_widget([packagesLocalFolder, packagesAtlasboardFolder], "bbblockers", {}, res);
    });

  });
});